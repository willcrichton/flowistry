name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/cargo@v1
        with:
          command: test
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path crates/flowistry_ide --debug
      - run: npm install && npm run build
        working-directory: ide
      - run: pip3 install -r scripts/requirements.txt && python3 scripts/check_versions.py

  build-artifacts:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: macos-10.15
            target: x86_64-apple-darwin
          - os: windows-2022
            target: x86_64-pc-windows-msvc
          ## TODO: rustc_private is inserting incorrect dylib/so paths on ARM
          ## targets b/c the Github Actions runner is x86, see issue #25.
          ## Either:
          ##   * rustc_private cross compilation needs to get fixed
          ##   * or github actions needs to provide ARM runners
          ## For what's been tried so far, see:
          ##   https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/rustc_private.20cross-compilation
          # - os: ubuntu-20.04
          #   target: aarch64-unknown-linux-gnu
          # - os: macos-11
          #   target: aarch64-apple-darwin
         
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-11-07
          components: rust-src, rustc-dev, llvm-tools-preview
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - run: python3 ../../scripts/prepare_artifact.py ${{ matrix.target }}
        working-directory: target/release
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: target/release/${{ matrix.target }}.zip

  publish-release:
    needs: build-artifacts
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu.zip
            x86_64-apple-darwin/x86_64-apple-darwin.zip
            x86_64-pc-windows-msvc/x86_64-pc-windows-msvc.zip

  publish-extension:
    needs: publish-release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - run: cd ide && npm install
      - run: cd ide && npm install -g vsce && vsce publish -p ${{ secrets.VSCODE_TOKEN }}
      - run: cd ide && npm install -g ovsx && npx ovsx publish -p ${{ secrets.OVSX_TOKEN }}

  publish-crate:
    needs: publish-extension
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - run: cargo login ${{ secrets.CRATES_IO_TOKEN }} && cargo install cargo-workspaces
      - uses: actions-rs/cargo@v1
        with:
          command: ws
          args: publish --from-git --yes

  publish-docs:
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - run: cargo doc --lib
      - run: RUSTDOCFLAGS="--html-in-header scripts/katex-header.html" cargo doc --lib --no-deps
      - uses: JamesIves/github-pages-deploy-action@v4.3.0
        with:
          branch: gh-pages
          folder: ./target/doc
          clean: true
          clean-exclude: dev
