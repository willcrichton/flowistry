name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/cargo@v1
        with:
          command: test
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path crates/flowistry_ide --debug
      - run: npm install && npm run build
        working-directory: ide
      - run: pip3 install -r scripts/requirements.txt && python3 scripts/check_versions.py

  build-artifacts:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: macos-10.15
            target: x86_64-apple-darwin

          ## TODO: rustc_private is inserting incorrect dylib/so paths on ARM
          ## targets b/c the Github Actions runner is x86, see issue #25.
          ## Either:
          ##   * rustc_private cross compilation needs to get fixed
          ##   * or github actions needs to provide ARM runners
          ## For what's been tried so far, see:
          ##   https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/rustc_private.20cross-compilation
          # - os: ubuntu-20.04
          #   target: aarch64-unknown-linux-gnu
          # - os: macos-11
          #   target: aarch64-apple-darwin

          ## TODO: need to fix windows bugs before building for windows.
          # - os: windows-2019
          #   target: x86_64-pc-windows-msvc
          # - os: windows-2019
          #   target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-02-17
          components: rust-src, rustc-dev, llvm-tools-preview
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - run: rm -f cargo-flowistry.d flowistry-driver.d && zip ${{ matrix.target }}.zip cargo-flowistry* flowistry-driver*
        working-directory: target/release
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: target/release/${{ matrix.target }}.zip

  publish-release:
    needs: build-artifacts
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu.zip
            x86_64-apple-darwin/x86_64-apple-darwin.zip   

  publish-extension:
    needs: publish-release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - run: cd ide && npm install
      - run: cd ide && npm install -g vsce && vsce publish -p ${{ secrets.VSCODE_TOKEN }}
      - run: cd ide && npm install -g ovsx && npx ovsx publish -p ${{ secrets.OVSX_TOKEN }}

  publish-crate:
    needs: publish-extension
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: -p flowistry
      # Sleep is b/c flowistry_ide won't publish until flowistry
      # has registered on crates.io which takes a second. 
      # TODO: is there a better way to wait?
      - run: sleep 60; cp README.md crates/flowistry_ide/
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: -p flowistry_ide --allow-dirty

  publish-docs:
    needs: test
    runs-on: ubuntu-20.04
    env:
      RUSTDOCFLAGS: --html-in-header scripts/katex-header.html
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --lib
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
