window.SIDEBAR_ITEMS = {"enum":[["DecodeError","Errors that can occur while decoding."],["DecodeSliceError","Errors that can occur while decoding into a slice."],["EncodeSliceError","Errors that can occur while encoding into a slice."]],"fn":[["decode","Decode base64 using the `STANDARD` engine."],["decode_engine","Decode from string reference as octets using the specified [Engine]."],["decode_engine_slice","Decode the input into the provided output slice."],["decode_engine_vec","Decode from string reference as octets."],["decoded_len_estimate","Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up to the next group of 3 decoded bytes)."],["encode","Encode arbitrary octets as base64 using the `STANDARD` engine."],["encode_engine","Encode arbitrary octets as base64 using the provided `Engine` into a new `String`."],["encode_engine_slice","Encode arbitrary octets as base64 into a supplied slice."],["encode_engine_string","Encode arbitrary octets as base64 into a supplied `String`."],["encoded_len","Calculate the base64 encoded length for a given input length, optionally including any appropriate padding bytes."]],"mod":[["alphabet","Provides [Alphabet] and constants for alphabets commonly used in the wild."],["display","Enables base64â€™d output anywhere you might use a `Display` implementation, like a format string."],["engine","Provides the [Engine] abstraction and out of the box implementations."],["prelude","Preconfigured engines for common use cases."],["read","Implementations of `io::Read` to transparently decode base64."],["write","Implementations of `io::Write` to transparently handle base64."]]};